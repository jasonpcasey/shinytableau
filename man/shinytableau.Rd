% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shinytableau.R
\name{shinytableau}
\alias{shinytableau}
\title{shinytableau: htmlwidget for the Tableau Javascript API}
\usage{
shinytableau(url, hideTabs = TRUE, hideToolbar = TRUE, width = NULL,
  height = NULL, elementId = NULL)
}
\arguments{
\item{url}{the URL of the tableau view to embed}

\item{hideTabs}{a logical value (\code{TRUE} or \code{FALSE}).  If \code{TRUE}
tabs will not be displayed.}

\item{hideToolbar}{a logical value (\code{TRUE} or \code{FALSE}).  If \code{TRUE}
the toolbar will not be display.}

\item{width}{width of the embedded view (in css units)}

\item{height}{height of the embedded view (in css units)}

\item{elementId}{an explicit element ID. Ignored for Shiny apps}
}
\description{
shinytableau allows you to embed interactive Tableau workbooks into R
using the \href{http://www.htmlwidgets.org/}{htmlwidgets} package
and the \href{https://onlinehelp.tableau.com/current/api/js_api/en-us/JavaScriptAPI/js_api_ref.htm}{Tableau Javascript API}.
Parameter values can be modified and views can be filtered, selected,
and exported. The ability to run R code after actions are taken within
Tableau, such as selecting points or changing parameter values is
enabled through event listeners.
}
\section{Accessing Tableau data in Shiny}{


Some Tableau data is available as Shiny inputs after the initial view has finished
loading. These inputs can be wrapped in reactive functions for triggering R code
after user interactions with the Tableau view such as changing parameters,
selecting data, or switching tabs. These inputs are prefixed with the
\code{outputId} of the embedded Tableau object. For example, if the
\code{outputId} is \code{myviz}, then these four input variables will be generated:

\describe{
  \item{\code{input$myviz_loaded}}{TRUE when the workbook finishes loading.}

  \item{\code{input$myviz_parameters}}{returns a data.frame containing
  the parameters available in the workbook and their current values.  Both the
  raw values and formatted values are available, although parameters can only
  be changed via \code{\link{tableauChangeParameter}} using the formatted values.
  Calls to \code{\link{tableauChangeParameter}} also trigger changes to this input.}

  \item{\code{input$myviz_selectedMarks}}{returns a data.frame containing
  the marks currently selected in view. Each row represents a point and
  the columns describe the fields that identify that point. Calls to
  \code{\link{tableauSelect}} also trigger changes to this input.}

  \item{\code{input$myviz_worksheet}}{returns a string containing the
  name of the current active worksheet. Calls to
  \code{\link{tableauChangeSheet}} also trigger changes to this input.}
}
}

